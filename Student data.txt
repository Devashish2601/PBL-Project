// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentManagement 
    { 
    struct Student 
        {
        uint256 id;
        string name;
        uint256 age;
        string course;
        }

    Student[] public students;
    event StudentAdded(uint256 id, string name, uint256 age, string course);
    
    fallback() external payable 
        {
        // You can log or handle unexpected Ether or data sent to this contract.
        }

    receive() external payable 
        {
        // This function is triggered when Ether is sent without any data.
        }

    function addStudent(uint256 _id, string memory _name, uint256 _age, string memory _course) public
        {
        Student memory newStudent = Student({
            id: _id,
            name: _name,
            age: _age,
            course: _course
        });
        students.push(newStudent);
        emit StudentAdded(_id, _name, _age, _course);
        }

    function getStudentCount() public view returns (uint256) 
        {
        return students.length;
        }

    function getStudent(uint256 index) public view returns (uint256, string memory, uint256, string memory) 
        {
        require(index < students.length, "Student does not exist.");
        Student memory s = students[index];
        return (s.id, s.name, s.age, s.course);
        }
    }









































































































































Blockchain is a decentralized digital ledger that records transactions across a network of computers. Each block contains data and is securely linked to the previous one, forming an immutable chain. This structure provides transparency, security, and eliminates the need for a central authority.


This Solidity smart contract, named `StudentManagement`, is designed for managing student records. It allows adding, retrieving, and counting students.

### Key Components

1. **SPDX License**: Specifies that this contract is licensed under MIT.

2. **Struct Definition**:
   - `Student`: Defines a student with properties:
     - `id`: A unique identifier for each student.
     - `name`: Student's name.
     - `age`: Student's age.
     - `course`: Student's enrolled course.

3. **State Variables**:
   - `students`: A dynamic array that stores `Student` structs.
   - `StudentAdded`: An event emitted whenever a new student is added.

4. **Fallback and Receive Functions**:
   - `fallback()`: Handles calls with data not matching any function signature.
   - `receive()`: Triggered when Ether is sent without data.

5. **Functions**:
   - `addStudent`: Adds a new student to the array.
     - Takes parameters `_id`, `_name`, `_age`, and `_course`.
     - Creates a `Student` struct and adds it to the `students` array.
     - Emits the `StudentAdded` event.

   - `getStudentCount`: Returns the total number of students.

   - `getStudent`: Retrieves student data by index.
     - Ensures the index is within bounds.
     - Returns the student’s ID, name, age, and course.

### Summary
This contract allows:
- Adding a student’s information.
- Counting the total students.
- Retrieving specific student details by index.


 The Ethereum Virtual Machine (EVM) is a decentralized virtual machine that runs smart
 contracts on the Ethereum network. It enables developers to deploy code in a trustless,
 decentralized environment, executing scripts using an international network of public nodes.
The EVM ensures that all nodes in the network execute smart contracts in the same way,
 guaranteeing consensus across the blockchain.

Hyperledger is an open-source, collaborative blockchain framework designed for building enterprise-grade, permissioned blockchain networks. It provides tools and libraries for creating customized blockchain solutions with a focus on privacy and scalability.
